{
  "name": "confit",
  "version": "2.1.0",
  "description": "Environment-aware configuration.",
  "main": "dist/index.js",
  "directories": {
    "test": "test",
    "dist": "dist"
  },
  "scripts": {
    "compile": "babel --optional runtime --modules common --out-dir dist index.js lib/**.js",
    "prepublish": "npm run compile",
    "test": "npm run compile && babel-node test/harness.js test/**/*-test.js",
    "cover": "npm run compile && babel-node node_modules/.bin/istanbul cover test/harness.js test/**/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/krakenjs/confit.git"
  },
  "keywords": [
    "application",
    "configuration",
    "config"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "totherik@gmail.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "readmeFilename": "README.md",
  "devDependencies": {
    "babel": "4.7.3",
    "glob": "^4.3.5",
    "istanbul": "^0.3.5",
    "jshint": "^2.6.0",
    "tape": "^3.5.0"
  },
  "dependencies": {
    "async": "^0.9.0",
    "babel-runtime": "4.7.3",
    "caller": "^1.0.0",
    "core-util-is": "^1.0.1",
    "debuglog": "^1.0.1",
    "minimist": "^1.1.0",
    "shortstop": "^1.0.1",
    "shortstop-handlers": "^1.0.0",
    "shush": "^1.0.0"
  },
  "readme": "confit\n======\n\nLead Maintainer: [Shaun Warman](https://github.com/shaunwarman)  \n\n[![Build Status](https://travis-ci.org/krakenjs/confit.svg?branch=2.x)](https://travis-ci.org/krakenjs/confit)  \n\nSimple, environment-based configuration. `confit` loads a default JSON\nconfiguration file, additionally loading environment-specific files, if applicable.\nIt will also process the loaded files using any configured\n[shortstop](https://github.com/paypal/shortstop) protocol handlersâ€”see **Options** below.\n\n`confit` adds support for adding JavaScript-style comments in your json files as each file is processed by [shush](https://github.com/totherik/shush) before being merged into your config.\n\n\n## Usage\n```javascript\nvar confit = require('confit');\n```\n\n### confit([options])\n* `options` (*String* | *Object*) - the base directory in which config files live or a configuration object. If no\narguments is provided, defaults to the directory of the calling file. Signature `function (err, config) {}`\n* returns - config factory.\n\n```javascript\n'use strict';\n\nvar path = require('path');\nvar confit = require('confit');\n\nvar basedir = path.join(__dirname, 'config');\nconfit(basedir).create(function (err, config) {\n    config.get; // Function\n    config.set; // Function\n    config.use; // Function\n\n    config.get('env:env'); // 'development'\n});\n```\n\n### config factory\n* `addOverride(filepath)` (or) `addOverride(obj)` - Use this to add file (.json or .js), to merge with the config datastore and override the overlapping data if any. Alternatively, you can also pass a json object to override.\n* `addDefault(filepath)` (or) `addDefault(obj)` - Use this to add default file (.json or .js), to merge with the config datastore and serve as the default datastore. Alternatively, you can also pass a json object for defaults.\n* `create(callback)` - Creates the config object, ready for use. Callback signature: `function (err, config) {}`\n\n```javascript\n// All methods besides `create` are chainable\nconfit(options)\n    .addDefault('./mydefaults.json')  //or .addDefault({foo: 'bar'})\n    .addOverride('./mysettings.json') //or .addOverride({foo: 'baz'})\n    .create(function (err, config) {\n        // ...\n    });\n\n// - or -\n//\n// var factory = confit(options);\n// factory.addOverride('./mysettings.json');\n// factory.create(function (err, config) {\n//     // ...\n// });\n```\n\n## Options\n* `basedir` (*String*) - the base directory in which config files can be found.\n* `protocols` (*Object*) - An object containing a mapping of\n[shortstop](https://github.com/paypal/shortstop) protocols to either handler implementations or an array or handler implementations.\nThese protocols will be used to process the config data prior to registration.\nIf using an array of handler implementations, each handler is run in series (see [`Multiple handlers` in the shortstop README](https://github.com/krakenjs/shortstop#multiple-handlers)).\n* `defaults` (*String*) - the name of the file containing all default values.\nDefaults to `config.json`.\n\n```javascript\n'use strict';\n\nvar path = require('path');\nvar confit = require('confit');\nvar handlers = require('shortstop-handlers');\n\n\nvar options = {\n    basedir: path.join(__dirname, 'config'),\n    protocols: {\n        file: handlers.file,\n        glob: handlers.glob\n    }\n};\n\nconfit(options).create(function (err, config) {\n    // ...\n});\n```\n\n\n## Config API\n* `get(key)` - Retrieve the value for a given key. Colon-delimited keys can be used to traverse the object hierarchy.\n* `set(key, value)` - Set a value for the given key. Colon-delimited keys can be used to traverse the object hierarchy.\n* `use(obj)` - merge provided object into config.\n\n```javascript\nconfig.set('foo', 'bar');\nconfig.get('foo'); // 'bar'\n\nconfig.use({ foo: 'baz' });\nconfig.get('foo'); // 'baz'\n\nconfig.use({ a: { b: { c: 'd' } } } );\nconfig.get('a:b:c'); // 'd'\n```\n\n## Default Behavior\nBy default, `confit` loads `process.env` and `argv` values upon initialization.\nAdditionally, it creates convenience environment properties prefixed with\n`env:` based on the current `NODE_ENV` setting, defaulting to `development`. It\nalso normalizes `NODE_ENV` settings so values starting with `prod` become\n`production`, starting with `stag` become `staging`, starting with `test`\nbecome `test` and starting with `dev` become `development`.\n\n```javascript\n// NODE_ENV='dev'\nconfig.get('NODE_ENV');        // 'dev'\nconfig.get('env:env');         // 'development'\nconfig.get('env:development'); // true\nconfig.get('env:test');        // false\nconfig.get('env:staging');     // false\nconfig.get('env:production');  // false\n```\n\n```javascript\n// NODE_ENV='custom'\nconfig.get('NODE_ENV');        // 'custom'\nconfig.get('env:env');         // 'custom'\nconfig.get('env:development'); // false\nconfig.get('env:test');        // false\nconfig.get('env:staging');     // false\nconfig.get('env:production');  // false\nconfig.get('env:custom');      // true\n```\n#### Precedence\n\nPrecedence takes the following form (lower numbers overwrite higher numbers):\n\n1. command line arguments\n2. env variables\n3. environment-specific config (e.g., `development.json`)\n4. main config (`config.json`)\n5. `env` normalization (`env`, `env:development`, etc)\n\n#### Shortstop Handlers\n\nConfit by default comes with 2 shortstop handlers enabled.\n\n* `import:`\nMerges the contents of the specified file into configuration under a given key.\n```json\n{\n    \"foo\": \"import:./myjsonfile\"\n}\n```\n\n* `config:`\nReplaces with the value at a given key. Note that the keys in this case are dot (.) delimited.\n```json\n{\n    \"foo\": {\n        \"bar\": true\n    },\n    \"foobar\": \"config:foo.bar\"\n}\n```\n",
  "bugs": {
    "url": "https://github.com/krakenjs/confit/issues"
  },
  "_id": "confit@2.1.0",
  "dist": {
    "shasum": "21172c38656ff641ae428f4715a4b73df7e4c3da"
  },
  "_from": "confit@^2.0.3",
  "_resolved": "https://registry.npmjs.org/confit/-/confit-2.1.0.tgz"
}
